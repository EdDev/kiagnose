name: checks

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  go-versions:
    name: Lookup go versions
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.versions.outputs.matrix }}
      minimal: ${{ steps.versions.outputs.minimal }}
    steps:
      - uses: actions/checkout@v2
      - uses: arnested/go-version-action@v1
        id: versions
  lint:
    name: lint
    runs-on: ubuntu-latest
    needs: go-versions
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ needs.go-versions.outputs.minimal }}
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.44.2
  unit-test:
    name: Unit Test
    runs-on: ubuntu-latest
    needs: go-versions
    strategy:
      matrix:
        version: ${{ fromJSON(needs.go-versions.outputs.matrix) }}
    steps:
    - name: Check out code
      uses: actions/checkout@v2
    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.version }}
    - name: Run unit tests
      run: ./automation/make.sh --unit-test
  echo-unit-test:
    name: Echo checkup Unit Test
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Run unit tests
        run: ./automation/make.sh --echo-unit-test
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: go-versions
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ needs.go-versions.outputs.minimal }}
      - name: Run build
        run: ./automation/make.sh --build-core
  e2e-test:
    name: E2E Test
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Install kind
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.12.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind
      - name: Install kubectl
        run: |
          curl -LO https://dl.k8s.io/release/v1.23.0/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl
      - name: Create cluster
        run: sudo kind create cluster --wait 2m
      - name: Get cluster status
        run: |
          # wait network is ready
          sudo kubectl wait --for=condition=ready pods --namespace=kube-system -l k8s-app=kube-dns
          sudo kubectl get nodes -o wide
          sudo kubectl get pods -A
      - name: Delete cluster
        run: sudo kind delete cluster
